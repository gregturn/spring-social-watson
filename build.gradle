buildscript {
    repositories {
        maven { url 'http://repo.spring.io/plugins-release' }
        jcenter()
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.0'
        classpath 'me.champeau.gradle:gradle-javadoc-hotfix-plugin:0.1'
    }
}

configure(allprojects) {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'javadocHotfix'

    group = 'com.russmiles.social'

    sourceCompatibility=1.5
    targetCompatibility=1.5

    ext {
        springSocialVersion = '1.1.0.BUILD-SNAPSHOT'
        jacksonVersion = '2.3.0'
        junitVersion = '4.11'
        mockitoVersion = '1.9.5'
        servletApiVersion = '3.0.1'
        springVersion = '4.0.2.RELEASE'
    }

    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:none']

    sourceSets.test.resources.srcDirs = ['src/test/resources', 'src/test/java']

    test.systemProperty("java.awt.headless", "true")

    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven { url "http://repo.spring.io/ebr-maven-external" }
    }

    dependencies {
        testCompile "junit:junit:$junitVersion"
        testCompile "org.mockito:mockito-all:$mockitoVersion"
        testCompile "org.springframework:spring-test:$springVersion"
    }
}

project('spring-social-watson') {
    description = 'Watson API'
    dependencies {
       compile "org.springframework.social:spring-social-core:$springSocialVersion"
       compile ("org.springframework.social:spring-social-config:$springSocialVersion")
       compile ("org.springframework.social:spring-social-security:$springSocialVersion")
       compile ("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
       compile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
       compile ("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
       compile ("javax.servlet:javax.servlet-api:$servletApiVersion")
       testCompile "org.springframework:spring-test:$springVersion"
    }
}

configure(rootProject) {
    description = 'Spring Social Watson'

    apply plugin: 'org.asciidoctor.gradle.asciidoctor'

    asciidoctor {
        sourceDir = new File("src/reference/asciidoc")
        outputDir = new File("$buildDir/docs")
        options = [
                doctype: 'book',
                attributes: [
                        'source-highlighter': 'coderay',
                        toc                 : '',
                        idprefix            : '',
                        idseparator         : '-'
                ]
        ]
    }

    dependencies { // for integration tests
    }
    
    task api(type: Javadoc) {
        group = 'Documentation'
        description = 'Generates aggregated Javadoc API documentation.'
        title = "${rootProject.description} ${version} API"
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = rootProject.description
        options.overview = 'src/api/overview.html'
        options.links(
            'http://docs.jboss.org/jbossas/javadoc/4.0.5/connector'
        )
        source subprojects.collect { project ->
            project.sourceSets.main.allJava
        }
        destinationDir = new File(buildDir, "api")
        classpath = files(subprojects.collect { project ->
            project.sourceSets.main.compileClasspath
        })

        maxMemory = '1024m'
    }

    task docsZip(type: Zip) {
        group = 'Distribution'
        classifier = 'docs'
        description = "Builds -${classifier} archive containing api and reference " +
                "for deployment."

        from('src/dist') {
            include 'changelog.txt'
        }

        from(api) {
            into 'api'
        }
    }

    task wrapper(type: Wrapper) {
        description = 'Generates gradlew[.bat] scripts'
        gradleVersion = '2.8'
    }

}

task updateRootDocs << {
    copy {
        from 'src/dist'
        into "${rootProject.projectDir}"
        include 'notice.txt'
        expand(copyright: new Date().format('yyyy'), version: project.version)
        rename { filename -> 'NOTICE' }
    }

    copy {
        from 'src/dist'
        into "${rootProject.projectDir}"
        include 'license.txt'
        rename { filename -> 'LICENSE' }
    }
}

build.dependsOn('updateRootDocs')

